{"version":3,"sources":["images/appreciation/Artboard2.png","images/backgrounds/section1.jpg","images/moms/Artboard3.png","images/fun/Artboard4.png","images/mcd/Artboard5.png","images/babes/Artboard6.png","images/sidechick/Artboard7.png","images/sidechick/Artboard8.png","audio/shygirl.mp3","components/GridSuspenseImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridSuspenseImage","props","src","height","alt","delay","fallback","width","loading","decoding","defaultProps","RenderMemory","page","app","mom","fun","mcd","babes","chick1","chick2","App","useState","setPage","className","kedam","autoPlay","section1","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,4KCG5B,SAASC,EAAkBC,GAAQ,IACxCC,EAAqBD,EAArBC,IAAKC,EAAgBF,EAAhBE,OAAQC,EAAQH,EAARG,IACrB,OACE,kBAAC,WAAD,CACEC,MAAK,MACLC,SAAU,yBAAKJ,IAAKA,EAAKC,OAAO,OAAOI,MAAM,OAAOH,IAAKA,KAEzD,yBACEF,IAAKA,EACLC,OAAQA,EACRI,MAAM,OACNH,IAAKA,EACLI,QAAQ,OACRC,SAAS,WAYjBT,EAAkBU,aAAe,CAC/BR,IAAK,GACLC,OAAQ,OACRC,IAAK,I,yKCjBDO,EAAe,SAACV,GAEpB,OADiBA,EAATW,MAEN,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACZ,EAAD,CAAmBE,IAAKW,IAAKV,OAAO,UAI5C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKY,IAAKX,OAAO,UAI5C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKa,IAAKZ,OAAO,UAI5C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKc,IAAKb,OAAO,UAI5C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKe,IAAOd,OAAO,UAI9C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKgB,IAAQf,OAAO,UAI/C,KAAK,EACH,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKiB,IAAQhB,OAAO,UAI/C,QACE,OACE,iCACE,kBAAC,IAAD,KACE,kBAACH,EAAD,CAAmBE,IAAKW,IAAKV,OAAO,YAwCjCiB,MAjCf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNT,EADM,KACAU,EADA,KAGb,OACE,yBAAKC,UAAU,OACb,2BAAOrB,IAAKsB,IAAOC,UAAQ,IAC3B,4BAAQF,UAAU,cAChB,kBAACvB,EAAD,CAAmBE,IAAKwB,IAAUnB,MAAM,UAE1C,6BAASgB,UAAU,oBACjB,kBAAC,EAAD,CAAcX,KAAMA,IACpB,yBAAKW,UAAU,OACH,IAATX,EACC,4BAAQe,QAAS,kBAAML,EAAQ,KAA/B,YAEA,4BAAQK,QAAS,kBAAML,EAAQV,EAAO,KAAtC,YAGQ,IAATA,EACC,4BAAQe,QAAS,kBAAML,EAAQ,KAA/B,QAEA,4BAAQK,QAAS,kBAAML,EAAQV,EAAO,KAAtC,UAIN,6BAASW,UAAU,UACjB,8CACA,6CCnGYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.158bae81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Artboard2.b775dfca.png\";","module.exports = __webpack_public_path__ + \"static/media/section1.e6b39107.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Artboard3.b5c08442.png\";","module.exports = __webpack_public_path__ + \"static/media/Artboard4.4f337330.png\";","module.exports = __webpack_public_path__ + \"static/media/Artboard5.5e701109.png\";","module.exports = __webpack_public_path__ + \"static/media/Artboard6.7ff01742.png\";","module.exports = __webpack_public_path__ + \"static/media/Artboard7.99d61b72.png\";","module.exports = __webpack_public_path__ + \"static/media/Artboard8.f0910469.png\";","module.exports = __webpack_public_path__ + \"static/media/shygirl.aca3d648.mp3\";","import React, { Suspense } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function GridSuspenseImage(props) {\r\n  const { src, height, alt } = props;\r\n  return (\r\n    <Suspense\r\n      delay={`1ms`}\r\n      fallback={<img src={src} height=\"4rem\" width=\"4rem\" alt={alt} />}\r\n    >\r\n      <img\r\n        src={src}\r\n        height={height}\r\n        width=\"100%\"\r\n        alt={alt}\r\n        loading=\"lazy\"\r\n        decoding=\"async\"\r\n      />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nGridSuspenseImage.propTypes = {\r\n  src: PropTypes.string,\r\n  height: PropTypes.string,\r\n  alt: PropTypes.string,\r\n};\r\n\r\nGridSuspenseImage.defaultProps = {\r\n  src: \"\",\r\n  height: \"100%\",\r\n  alt: \"\",\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport GridSuspenseImage from \"./components/GridSuspenseImage\";\nimport section1 from \"./images/backgrounds/section1.jpg\";\nimport app from \"./images/appreciation/Artboard2.png\";\nimport mom from \"./images/moms/Artboard3.png\";\nimport fun from \"./images/fun/Artboard4.png\";\nimport mcd from \"./images/mcd/Artboard5.png\";\nimport babes from \"./images/babes/Artboard6.png\";\nimport chick1 from \"./images/sidechick/Artboard7.png\";\nimport chick2 from \"./images/sidechick/Artboard8.png\";\nimport kedam from \"./audio/shygirl.mp3\";\nimport Fade from \"react-reveal/Fade\";\n\nconst RenderMemory = (props) => {\n  const { page } = props;\n  switch (page) {\n    case 0:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={app} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 1:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={mom} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 2:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={fun} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 3:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={mcd} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 4:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={babes} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 5:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={chick1} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    case 6:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={chick2} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n    default:\n      return (\n        <section>\n          <Fade>\n            <GridSuspenseImage src={app} height=\"80%\" />\n          </Fade>\n        </section>\n      );\n  }\n};\n\nfunction App() {\n  const [page, setPage] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <audio src={kedam} autoPlay />\n      <header className=\"App-header\">\n        <GridSuspenseImage src={section1} width=\"100%\" />\n      </header>\n      <section className=\"memory_container\">\n        <RenderMemory page={page} />\n        <div className=\"nav\">\n          {page === 0 ? (\n            <button onClick={() => setPage(6)}>Previous</button>\n          ) : (\n            <button onClick={() => setPage(page - 1)}>Previous</button>\n          )}\n\n          {page === 6 ? (\n            <button onClick={() => setPage(0)}>Next</button>\n          ) : (\n            <button onClick={() => setPage(page + 1)}>Next</button>\n          )}\n        </div>\n      </section>\n      <section className=\"footer\">\n        <h1>Made With Love</h1>\n        <h1>By Chamans</h1>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}